LINK:
https://www.youtube.com/watch?v=np_vyd7QlXk&t=417s&pp=ygUMY3Vyc28gRE9DS0VS
DOCKER__BASICO__MATHEUS__unico_46min


/////////////////////////////// VERSION
docker version


/////////////////////////////// NODE
docker run -it node
                        é o mesmo que node:latest
                        ou seja, imagem recente

            --------------------------
            Combinação de duas opções:
            --------------------------
            
            -i (interativo): Mantém o STDIN (entrada padrão) aberto, permitindo que você interaja com o contêiner, mesmo que não esteja conectado diretamente.

            -t (tty): Aloca um terminal virtual (pseudo-TTY) para o contêiner, proporcionando uma interface de terminal interativa, como se você estivesse dentro do contêiner.

            Juntas, essas opções permitem que você execute o contêiner em modo interativo, com um terminal onde você pode digitar comandos.
            --------------------


/////////////////////////////// SAIR 
ctrl + c (2x)


/////////////////////////////// ATIVOS 
docker ps 
 

/////////////////////////////// TODOS 
docker ps -a


/////////////////////////////// START rodando de novo 
docker ps -a 
copia o id 
---------------------------- iniciar container 
docker start <id ou nome>

/////////////////////////////// PARAR
docker stop <id ou nome>


/////////////////////////////// EXCLUIR 
docker rm <id ou nome>


/////////////////////////////// NODE  +  NOME
docker run -it --name <  nome  > node


/////////////////////////////// START  +  NOME
docker start < nome >


/////////////////////////////// STOP  +  NOME
docker stop < nome >


/////////////////////////////// EXCLUIR  +  NOME
docker rm  < nome >


/////////////////////////////// EM BACKGROUND - DETACHED
docker run -d --name lessa_nginx -p 80:80 nginx

                ---------------------------------------------
                -d  significa detached (em background)
                ---------------------------------------------
                -p  significa portas 
                                    - 80 (porta container)
                                    - 80 (porta do host)
                ---------------------------------------------


/////////////////////////////// LOGS
docker logs lessa_nginx 


LINK AULA:
https://youtu.be/np_vyd7QlXk

/////////////////////////////////////////////////////// 
HOST e DISTRO
/////////////////////////////////////////////////////// 
Windows 11
WSL2 - Ubuntu 24.04
///////////////////////////////////////////////////////
PERMISSOES
/////////////////////////////////////////////////////// acesso ide CURSOR:
    sudo chmod -R 775 < pasta no linux do proj node >


/////////////////////////////// DOCKERFILE + PROJETO NODE 
criei uma pasta matheus_node_docker
entrei e fiz:
                npm init -y (usei sem -y)
                npm install express

                //////////////////////////
                --------------------------
                cria arquivo da aplicacao:
                --------------------------
                index.js 
                --------------------------

                //////////////////////////
                cria arquivo Docker:
                --------------------------
                Dockerfile 
                --------------------------

nao vamos precisar do node instalado
so usamos ele para montar o package.json
entao apagamos:
                ///////////////////////////
                ---------------------------
                apagando pastas e arquivos:
                ---------------------------
                - node_modules
                - package-lock.json
                ---------------------------


NA PASTA AGORA SO TEM 3 ARQUIVOS :
..................................
            - index.js 
            - Dockerfile 
            - package.json 




..................................
index.js    
..................................

const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req,res) => {
    res.send('Rodando Node + express no Docker');
});
app.listen(port, () =>{
    console.log("Servidor rodando na porta : " + port);
});





..................................
Dockerfile
..................................


                        # importando um container basico padrao
FROM node 
                        # setando o diretorio de trabalho
WORKDIR /usr/src/app

                        # copiando o package.json para o WORKDIR
                        # COPY package.json /usr/src/app
                        # ou simplesmente coloca o ponto .
COPY package.json .

                        # instalando a aplicação
RUN npm install

                        # copiando todos os arquivos para o WORKDIR
                        # copia tudo (.) para o workdir (.)
COPY . .

                        # expondo a porta da aplicação index.js
EXPOSE 3000

                        # comando de start da aplicação
CMD ["node", "index.js"]



..................................
gerando a imagem do Dockerfile
..................................
dentro da pasta onde esta os arquivos 
inclusive o Dockerfile vc executa

////////////////////  CRIANDO IMAGEM : NOME + TAG

    docker build -t matheus_node_i:_v1 .   
                                    (ponto) nao esqueça


////////////////////  CRIANDO CONTAINER : NOME

    docker run -d --name matheus_node_c -p 3000:3000 matheus_node_i:_v1 





////////////////////////////////////////////////////////
////// ALTERACOES NO index.js
////////////////////////////////////////////////////////
////// se fizer qualquer mudança tem que buildar de novo
////////////////////////////////////////////////////////

////// PARANDO 
docker stop matheus_node_c 

////// REMOVENDO 
docker rm matheus_node_c 

////// BUILD 
docker build -t matheus_node_i:_v1 . 

////// RUN
docker run -d --name matheus_node_c -p 3000:3000 matheus_node_i:_v1 




///////////////////////////// EXCLUIR CONTAINER 
-------------- primeiro exclui o container
docker rm matheus_node_c

///////////////////////////// EXCLUIR IMAGEM 
-------------- depois exclui a imagem
docker rmi matheus_node_i:_v1


///////////////////////////// APAGAR TUDO - PRUNE
docker system prune 


/////////////////////////////////////////////
/////////////////////////// FIM DA AULA
/////////////////////////////////////////////
















